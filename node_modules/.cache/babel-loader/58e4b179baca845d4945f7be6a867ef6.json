{"ast":null,"code":"import axios from 'axios'; // axios.interceptors.request.use(\n//     config => {\n//         const storageData = JSON.parse(localStorage.getItem('user'));\n//         if (storageData) {\n//             config.headers['Authorization'] = storageData.token_type +' '+ storageData.access_token; \n//         }\n//         return config;\n//     },\n//     error => {\n//         Promise.reject(error)\n//     });\n//Add a response interceptor\n\naxios.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n}); // initial state\n\nconst state = () => ({\n  otpUserId: '',\n  otp: ''\n}); // getters\n\n\nconst getters = {\n  otpUserId: state => state.otpUserId,\n  otp: state => state.otp\n}; // actions\n\nconst actions = {\n  async setOtpUserId({\n    commit\n  }, id) {\n    commit('setOtpUserId', id);\n  },\n\n  async setOtp({\n    commit\n  }, id) {\n    commit('setOtp', id);\n  }\n\n}; // mutations\n\nconst mutations = {\n  setOtpUserId: (state, id) => {\n    state.otpUserId = id;\n  },\n  setOtp: (state, otp) => {\n    state.otp = otp;\n  }\n};\nexport default {\n  // namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","interceptors","response","use","error","Promise","reject","state","otpUserId","otp","getters","actions","setOtpUserId","commit","id","setOtp","mutations"],"sources":["/var/www/html/PMS_PROJECT/pds/src/store/modules/Auth.js"],"sourcesContent":["import axios from 'axios';\n// axios.interceptors.request.use(\n//     config => {\n//         const storageData = JSON.parse(localStorage.getItem('user'));\n//         if (storageData) {\n//             config.headers['Authorization'] = storageData.token_type +' '+ storageData.access_token; \n//         }\n//         return config;\n//     },\n//     error => {\n//         Promise.reject(error)\n//     });\n\n//Add a response interceptor\naxios.interceptors.response.use((response) => {\n    return response\n}, function(error) {\n    return Promise.reject(error);\n});\n\n\n// initial state\nconst state = () => ({\n    otpUserId :'',\n    otp:''\n});\n\n// getters\nconst getters = {\n    otpUserId: state => state.otpUserId,\n    otp: state => state.otp,\n};\n\n// actions\nconst actions = {\n    async setOtpUserId({ commit }, id){\n        commit('setOtpUserId', id);\n    },\n    async setOtp({ commit }, id){\n        commit('setOtp', id);\n    }\n}\n\n// mutations\nconst mutations = {\n    setOtpUserId: (state, id) => {\n        state.otpUserId = id\n    },\n    setOtp: (state, otp) => {\n        state.otp = otp\n    },\n\n}\n\nexport default {\n  // namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAA,KAAK,CAACC,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAiCD,QAAD,IAAc;EAC1C,OAAOA,QAAP;AACH,CAFD,EAEG,UAASE,KAAT,EAAgB;EACf,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAJD,E,CAOA;;AACA,MAAMG,KAAK,GAAG,OAAO;EACjBC,SAAS,EAAE,EADM;EAEjBC,GAAG,EAAC;AAFa,CAAP,CAAd,C,CAKA;;;AACA,MAAMC,OAAO,GAAG;EACZF,SAAS,EAAED,KAAK,IAAIA,KAAK,CAACC,SADd;EAEZC,GAAG,EAAEF,KAAK,IAAIA,KAAK,CAACE;AAFR,CAAhB,C,CAKA;;AACA,MAAME,OAAO,GAAG;EACZ,MAAMC,YAAN,CAAmB;IAAEC;EAAF,CAAnB,EAA+BC,EAA/B,EAAkC;IAC9BD,MAAM,CAAC,cAAD,EAAiBC,EAAjB,CAAN;EACH,CAHW;;EAIZ,MAAMC,MAAN,CAAa;IAAEF;EAAF,CAAb,EAAyBC,EAAzB,EAA4B;IACxBD,MAAM,CAAC,QAAD,EAAWC,EAAX,CAAN;EACH;;AANW,CAAhB,C,CASA;;AACA,MAAME,SAAS,GAAG;EACdJ,YAAY,EAAE,CAACL,KAAD,EAAQO,EAAR,KAAe;IACzBP,KAAK,CAACC,SAAN,GAAkBM,EAAlB;EACH,CAHa;EAIdC,MAAM,EAAE,CAACR,KAAD,EAAQE,GAAR,KAAgB;IACpBF,KAAK,CAACE,GAAN,GAAYA,GAAZ;EACH;AANa,CAAlB;AAUA,eAAe;EACb;EACAF,KAFa;EAGbG,OAHa;EAIbC,OAJa;EAKbK;AALa,CAAf"},"metadata":{},"sourceType":"module"}